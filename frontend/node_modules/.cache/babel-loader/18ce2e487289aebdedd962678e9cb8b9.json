{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lokesh\\\\CHARITY-DONATION\\\\frontend\\\\src\\\\components\\\\PaymentForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useLocation } from 'react-router-dom';\n\nfunction PaymentForm() {\n  _s();\n\n  const location = useLocation();\n  const [note, setNote] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    amount: \"\"\n  });\n  const [responseId, setResponseId] = useState(\"\"); // To store Razorpay payment ID\n  // Handle form input change\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setNote(prevNote => ({ ...prevNote,\n      [name]: value\n    }));\n  } // Create Razorpay order and trigger payment\n\n\n  const createRazorpayOrder = amount => {\n    let data = JSON.stringify({\n      amount: amount * 100,\n      // Amount in paise (100 paise = 1 INR)\n      currency: \"INR\"\n    });\n    let config = {\n      method: \"post\",\n      maxBodyLength: Infinity,\n      url: \"http://localhost:4000/orders\",\n      // Assuming this is the backend endpoint for order creation\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    axios.request(config).then(response => {\n      console.log(response.data);\n      handleRazorpayScreen(response.data);\n    }).catch(error => {\n      console.log(\"Error creating Razorpay order:\", error);\n    });\n  }; // Open Razorpay payment screen\n\n\n  const handleRazorpayScreen = orderData => {\n    const options = {\n      key: \"rzp_test_GcZZFDPP0jHtC4\",\n      // Replace with your Razorpay Key ID\n      amount: orderData.amount,\n      currency: orderData.currency,\n      name: \"Your Organization Name\",\n      description: \"Payment for donation\",\n      order_id: orderData.id,\n      // Order ID from the backend\n      handler: function (response) {\n        setResponseId(response.razorpay_payment_id);\n        console.log(\"Payment Successful:\", response); // Send payment details to the backend for verification\n\n        axios.post(\"http://localhost:4000/order/validate\", {\n          order_id: orderData.id,\n          payment_id: response.razorpay_payment_id,\n          razorpay_signature: response.razorpay_signature,\n          amount: note.amount\n        }).then(verifyRes => {\n          alert(\"Payment verified successfully!\");\n        }).catch(verifyErr => {\n          alert(\"Payment verification failed!\");\n          console.log(verifyErr);\n        });\n      },\n      prefill: {\n        name: note.name,\n        email: note.email,\n        contact: note.phone\n      },\n      theme: {\n        color: \"#F37254\"\n      }\n    };\n    const paymentObject = new window.Razorpay(options);\n    paymentObject.open();\n  }; // Handle form submission\n\n\n  function submitData(event) {\n    event.preventDefault();\n    note.title = location.state.title;\n    note.content = location.state.content; // Trigger Razorpay payment\n\n    createRazorpayOrder(note.amount);\n    setNote({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      amount: \"\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DONATION FORM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitData,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"name\",\n        onChange: handleChange,\n        value: note.name,\n        placeholder: \"Name\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        onChange: handleChange,\n        value: note.email,\n        placeholder: \"Email\",\n        type: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"phone\",\n        onChange: handleChange,\n        value: note.phone,\n        placeholder: \"Phone\",\n        type: \"tel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"amount\",\n        onChange: handleChange,\n        value: note.amount,\n        placeholder: \"Amount\",\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: \"title\",\n        value: location.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: \"content\",\n        value: location.state.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), responseId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Payment Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Payment ID: \", responseId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PaymentForm, \"EMRzOxry8UPxHMG7mepsRuueB0I=\", false, function () {\n  return [useLocation];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["C:/Users/Lokesh/CHARITY-DONATION/frontend/src/components/PaymentForm.js"],"names":["React","useState","axios","useLocation","PaymentForm","location","note","setNote","name","email","phone","amount","responseId","setResponseId","handleChange","event","value","target","prevNote","createRazorpayOrder","data","JSON","stringify","currency","config","method","maxBodyLength","Infinity","url","headers","request","then","response","console","log","handleRazorpayScreen","catch","error","orderData","options","key","description","order_id","id","handler","razorpay_payment_id","post","payment_id","razorpay_signature","verifyRes","alert","verifyErr","prefill","contact","theme","color","paymentObject","window","Razorpay","open","submitData","preventDefault","title","state","content"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction PaymentForm() {\r\n  const location = useLocation();\r\n  const [note, setNote] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    amount: \"\"\r\n  });\r\n\r\n  const [responseId, setResponseId] = useState(\"\"); // To store Razorpay payment ID\r\n\r\n  // Handle form input change\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n    setNote(prevNote => ({\r\n      ...prevNote,\r\n      [name]: value\r\n    }));\r\n  }\r\n\r\n  // Create Razorpay order and trigger payment\r\n  const createRazorpayOrder = (amount) => {\r\n    let data = JSON.stringify({\r\n      amount: amount * 100, // Amount in paise (100 paise = 1 INR)\r\n      currency: \"INR\"\r\n    });\r\n\r\n    let config = {\r\n      method: \"post\",\r\n      maxBodyLength: Infinity,\r\n      url: \"http://localhost:4000/orders\", // Assuming this is the backend endpoint for order creation\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      data: data\r\n    };\r\n\r\n    axios.request(config)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        handleRazorpayScreen(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error creating Razorpay order:\", error);\r\n      });\r\n  };\r\n\r\n  // Open Razorpay payment screen\r\n  const handleRazorpayScreen = (orderData) => {\r\n    const options = {\r\n      key: \"rzp_test_GcZZFDPP0jHtC4\", // Replace with your Razorpay Key ID\r\n      amount: orderData.amount,\r\n      currency: orderData.currency,\r\n      name: \"Your Organization Name\",\r\n      description: \"Payment for donation\",\r\n      order_id: orderData.id, // Order ID from the backend\r\n      handler: function (response) {\r\n        setResponseId(response.razorpay_payment_id);\r\n        console.log(\"Payment Successful:\", response);\r\n\r\n        // Send payment details to the backend for verification\r\n        axios.post(\"http://localhost:4000/order/validate\", {\r\n          order_id: orderData.id,\r\n          payment_id: response.razorpay_payment_id,\r\n          razorpay_signature: response.razorpay_signature,\r\n          amount: note.amount,\r\n        })\r\n          .then((verifyRes) => {\r\n            alert(\"Payment verified successfully!\");\r\n          })\r\n          .catch((verifyErr) => {\r\n            alert(\"Payment verification failed!\");\r\n            console.log(verifyErr);\r\n          });\r\n      },\r\n      prefill: {\r\n        name: note.name,\r\n        email: note.email,\r\n        contact: note.phone\r\n      },\r\n      theme: {\r\n        color: \"#F37254\"\r\n      }\r\n    };\r\n\r\n    const paymentObject = new window.Razorpay(options);\r\n    paymentObject.open();\r\n  };\r\n\r\n  // Handle form submission\r\n  function submitData(event) {\r\n    event.preventDefault();\r\n    \r\n    note.title = location.state.title;\r\n    note.content = location.state.content;\r\n\r\n    // Trigger Razorpay payment\r\n    createRazorpayOrder(note.amount);\r\n    \r\n    setNote({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      amount: \"\"\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"payment-form\">\r\n      <h1>DONATION FORM</h1>\r\n      <form onSubmit={submitData}>\r\n        <input\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          value={note.name}\r\n          placeholder=\"Name\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <input\r\n          name=\"email\"\r\n          onChange={handleChange}\r\n          value={note.email}\r\n          placeholder=\"Email\"\r\n          type=\"email\"\r\n        />\r\n\r\n        <input\r\n          name=\"phone\"\r\n          onChange={handleChange}\r\n          value={note.phone}\r\n          placeholder=\"Phone\"\r\n          type=\"tel\"\r\n        />\r\n\r\n        <input\r\n          name=\"amount\"\r\n          onChange={handleChange}\r\n          value={note.amount}\r\n          placeholder=\"Amount\"\r\n          type=\"number\"\r\n        />\r\n\r\n        <input\r\n          type=\"hidden\"\r\n          name=\"title\"\r\n          value={location.state.title}\r\n        />\r\n\r\n        <input\r\n          type=\"hidden\"\r\n          name=\"content\"\r\n          value={location.state.content}\r\n        />\r\n\r\n        <button type=\"submit\">Pay</button>\r\n      </form>\r\n\r\n      {responseId && (\r\n        <div>\r\n          <h2>Payment Successful!</h2>\r\n          <p>Payment ID: {responseId}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaymentForm;\r\n"]},"metadata":{},"sourceType":"module"}