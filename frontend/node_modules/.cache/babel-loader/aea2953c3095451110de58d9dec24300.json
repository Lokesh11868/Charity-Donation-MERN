{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lokesh\\\\CHARITY-DONATION\\\\frontend\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Login() {\n  _s();\n\n  const [loginType, setLoginType] = useState(\"\"); // To determine login type (admin/user)\n\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [message, setMessage] = useState(\"\"); // To display success/error messages\n\n  const history = useHistory();\n  const adminCredentials = {\n    email: \"vignesh05@123\",\n    password: \"vignesh123\"\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials({ ...credentials,\n      [name]: value\n    });\n  };\n\n  const submitCredential = async e => {\n    e.preventDefault();\n\n    if (loginType === \"admin\") {\n      // Admin login logic\n      if (credentials.email === adminCredentials.email && credentials.password === adminCredentials.password) {\n        localStorage.setItem(\"user\", JSON.stringify(credentials));\n        setMessage(\"Admin login successful!\");\n        history.push(\"/admin\"); // Redirect to admin page\n      } else {\n        setMessage(\"Invalid admin credentials.\");\n      }\n    } else if (loginType === \"user\") {\n      // User login logic\n      try {\n        const response = await fetch(\"http://localhost:4000/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(credentials)\n        });\n        const data = await response.json();\n\n        if (response.ok) {\n          localStorage.setItem(\"user\", JSON.stringify(data.user)); // Assuming the response contains user data\n\n          setMessage(\"User login successful!\");\n          history.push(\"/home\"); // Redirect to homepage on successful login\n        } else {\n          setMessage(data.message || \"Invalid login credentials.\");\n        }\n      } catch (error) {\n        setMessage(\"An error occurred during login.\");\n        console.error(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setLoginType(\"admin\"),\n        children: \"Admin Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setLoginType(\"user\"),\n        children: \"User Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), loginType && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loginType === \"admin\" ? \"Admin\" : \"User Login Selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), loginType && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitCredential,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insidediv\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          value: credentials.email,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insidediv\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: credentials.password,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"AL8a3uMLEbzH9ek7yvOZiAx+QmQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Lokesh/CHARITY-DONATION/frontend/src/components/Login.js"],"names":["React","useState","useHistory","Login","loginType","setLoginType","credentials","setCredentials","email","password","message","setMessage","history","adminCredentials","handleChange","e","name","value","target","submitCredential","preventDefault","localStorage","setItem","JSON","stringify","push","response","fetch","method","headers","body","data","json","ok","user","error","console"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const [loginType, setLoginType] = useState(\"\"); // To determine login type (admin/user)\r\n  const [credentials, setCredentials] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [message, setMessage] = useState(\"\"); // To display success/error messages\r\n  const history = useHistory();\r\n\r\n  const adminCredentials = {\r\n    email: \"vignesh05@123\",\r\n    password: \"vignesh123\",\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setCredentials({\r\n      ...credentials,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const submitCredential = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (loginType === \"admin\") {\r\n      // Admin login logic\r\n      if (\r\n        credentials.email === adminCredentials.email &&\r\n        credentials.password === adminCredentials.password\r\n      ) {\r\n        localStorage.setItem(\"user\", JSON.stringify(credentials));\r\n        setMessage(\"Admin login successful!\");\r\n        history.push(\"/admin\"); // Redirect to admin page\r\n      } else {\r\n        setMessage(\"Invalid admin credentials.\");\r\n      }\r\n    } else if (loginType === \"user\") {\r\n      // User login logic\r\n      try {\r\n        const response = await fetch(\"http://localhost:4000/login\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(credentials),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          localStorage.setItem(\"user\", JSON.stringify(data.user)); // Assuming the response contains user data\r\n          setMessage(\"User login successful!\");\r\n          history.push(\"/home\"); // Redirect to homepage on successful login\r\n        } else {\r\n          setMessage(data.message || \"Invalid login credentials.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"An error occurred during login.\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <h1>Login</h1>\r\n      <div>\r\n        <button onClick={() => setLoginType(\"admin\")}>Admin Login</button>\r\n        <button onClick={() => setLoginType(\"user\")}>User Login</button>\r\n      </div>\r\n\r\n      {loginType && (\r\n        <p>{loginType === \"admin\" ? \"Admin\" : \"User Login Selected\"}</p>\r\n      )}\r\n\r\n      {loginType && (\r\n        <form onSubmit={submitCredential}>\r\n          <div className=\"insidediv\">\r\n            <label>Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={credentials.email}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"insidediv\">\r\n            <label>Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={credentials.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Login</button>\r\n        </form>\r\n      )}\r\n\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}