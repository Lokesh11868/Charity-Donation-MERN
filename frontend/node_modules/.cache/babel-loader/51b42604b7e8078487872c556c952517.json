{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\napp.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    // Check if the user exists in the Users collection\n    const user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      // User not found\n      return res.status(404).send({\n        result: false,\n        message: \"User does not exist. Please sign up.\"\n      });\n    } // Verify the password\n\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      // Invalid password\n      return res.status(401).send({\n        result: false,\n        message: \"Invalid email or password.\"\n      });\n    } // Generate a JWT token for authentication\n\n\n    const token = jwt.sign({\n      _id: user._id\n    }, process.env.TOKEN_SECRET, {\n      expiresIn: \"1h\"\n    }); // Respond with success\n\n    res.header(\"auth-token\", token).send({\n      token,\n      email: user.email,\n      name: user.name,\n      result: true\n    });\n  } catch (err) {\n    console.error(\"Error during login:\", err);\n    res.status(500).send({\n      result: false,\n      message: \"An internal server error occurred.\"\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Lokesh/CROWDFUNDING-WEBSITE/crowdfunding/src/components/Login.js"],"names":["React","useState","useEffect","Route","Redirect","axios","useHistory","app","post","req","res","email","password","body","user","User","findOne","status","send","result","message","isPasswordValid","bcrypt","compare","token","jwt","sign","_id","process","env","TOKEN_SECRET","expiresIn","header","name","err","console","error"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEAC,GAAG,CAACC,IAAJ,CAAS,QAAT,EAAmB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AAEA,MAAI;AACF;AACA,UAAMC,IAAI,GAAG,MAAMC,IAAI,CAACC,OAAL,CAAa;AAAEL,MAAAA;AAAF,KAAb,CAAnB;;AAEA,QAAI,CAACG,IAAL,EAAW;AACT;AACA,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAArB,CAAP;AACD,KAPC,CASF;;;AACA,UAAMC,eAAe,GAAG,MAAMC,MAAM,CAACC,OAAP,CAAeX,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAA9B;;AACA,QAAI,CAACS,eAAL,EAAsB;AACpB;AACA,aAAOX,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAArB,CAAP;AACD,KAdC,CAgBF;;;AACA,UAAMI,KAAK,GAAGC,GAAG,CAACC,IAAJ,CAAS;AAAEC,MAAAA,GAAG,EAAEb,IAAI,CAACa;AAAZ,KAAT,EAA4BC,OAAO,CAACC,GAAR,CAAYC,YAAxC,EAAsD;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAtD,CAAd,CAjBE,CAmBF;;AACArB,IAAAA,GAAG,CAACsB,MAAJ,CAAW,YAAX,EAAyBR,KAAzB,EAAgCN,IAAhC,CAAqC;AACnCM,MAAAA,KADmC;AAEnCb,MAAAA,KAAK,EAAEG,IAAI,CAACH,KAFuB;AAGnCsB,MAAAA,IAAI,EAAEnB,IAAI,CAACmB,IAHwB;AAInCd,MAAAA,MAAM,EAAE;AAJ2B,KAArC;AAMD,GA1BD,CA0BE,OAAOe,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCF,GAArC;AACAxB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAArB;AACD;AACF,CAjCD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\napp.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if the user exists in the Users collection\r\n    const user = await User.findOne({ email });\r\n\r\n    if (!user) {\r\n      // User not found\r\n      return res.status(404).send({ result: false, message: \"User does not exist. Please sign up.\" });\r\n    }\r\n\r\n    // Verify the password\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);\r\n    if (!isPasswordValid) {\r\n      // Invalid password\r\n      return res.status(401).send({ result: false, message: \"Invalid email or password.\" });\r\n    }\r\n\r\n    // Generate a JWT token for authentication\r\n    const token = jwt.sign({ _id: user._id }, process.env.TOKEN_SECRET, { expiresIn: \"1h\" });\r\n\r\n    // Respond with success\r\n    res.header(\"auth-token\", token).send({\r\n      token,\r\n      email: user.email,\r\n      name: user.name,\r\n      result: true,\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Error during login:\", err);\r\n    res.status(500).send({ result: false, message: \"An internal server error occurred.\" });\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}